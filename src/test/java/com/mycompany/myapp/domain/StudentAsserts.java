package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StudentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAllPropertiesEquals(Student expected, Student actual) {
        assertStudentAutoGeneratedPropertiesEquals(expected, actual);
        assertStudentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAllUpdatablePropertiesEquals(Student expected, Student actual) {
        assertStudentUpdatableFieldsEquals(expected, actual);
        assertStudentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAutoGeneratedPropertiesEquals(Student expected, Student actual) {
        assertThat(actual)
            .as("Verify Student auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentUpdatableFieldsEquals(Student expected, Student actual) {
        assertThat(actual)
            .as("Verify Student relevant properties")
            .satisfies(a -> assertThat(a.getStudentName()).as("check studentName").isEqualTo(expected.getStudentName()))
            .satisfies(a -> assertThat(a.getSex()).as("check sex").isEqualTo(expected.getSex()))
            .satisfies(a -> assertThat(a.getStudentClass()).as("check studentClass").isEqualTo(expected.getStudentClass()))
            .satisfies(a -> assertThat(a.getStudentKhoahoc()).as("check studentKhoahoc").isEqualTo(expected.getStudentKhoahoc()))
            .satisfies(a -> assertThat(a.getDob()).as("check dob").isEqualTo(expected.getDob()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentUpdatableRelationshipsEquals(Student expected, Student actual) {
        // empty method
    }
}
